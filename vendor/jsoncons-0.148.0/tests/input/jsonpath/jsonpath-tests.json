[
    // + operator
    {
        "given" : [{"key1": 100,"key2": 100},{"key1": 105,"key2": 200}],
        "cases" : [
            {
                "annotation" : "set plus value",
                "expression" : "$[?((@.key1 + 110) == 210)]",
                "result" : [{"key1": 100,"key2": 100}]
            }
        ]
    },
    {
        "given" : [{"key1": 100,"key2": 100},{"key1": 105,"key2": 200}],
        "cases" : [
            {
                "annotation" : "value plus set",
                "expression" : "$[?((110 + @.key1) == 210)]",
                "result" : [{"key1": 100,"key2": 100}]
            }
        ]
    },
    {
        "given" : [{"key1": 100,"key2": 100},{"key1": 105,"key2": 200}],
        "cases" : [
            {
                "annotation" : "set plus set",
                "expression" : "$[?((@.key1 + @.key2) == 200)]",
                "result" : [{"key1": 100,"key2": 100}]
            }
        ]
    },

    // < operator
    {
        "given" : [{"some": "value"}],
        "cases" : [
            {
                "annotation" : "Filter empty set less than value",
                "expression" : "$[?(@.key<42)]",
                "result" : []
            }
        ]
    },
    {
        "given" : [{"some": "value"}],
        "cases" : [
            {
                "annotation" : "Filter value less than empty set",
                "expression" : "$[?(42 < @.key)]",
                "result" : []
            }
        ]
    },
    {
        "given" : [{"some": "value"}],
        "cases" : [
            {
                "annotation" : "Filter empty set less than empty set",
                "expression" : "$[?(@.other < @.key)]",
                "result" : []
            }
        ]
    },
    {
        "given" : [{"key1": 0,"key2": 20}, {"key1": 10,"key2": 9}],
        "cases" : [
            {
                "annotation" : "Filter non-empty set less than non-empty set",
                "expression" : "$[?(@.key1 < @.key2)]",
                "result" : [{"key1": 0,"key2": 20}]
            }
        ]
    },
    // > operator
    {
        "given" : [{"some": "value"}],
        "cases" : [
            {
                "annotation" : "Filter empty set greater than value",
                "expression" : "$[?(@.key>42)]",
                "result" : []
            }
        ]
    },
    {
        "given" : [{"some": "value"}],
        "cases" : [
            {
                "annotation" : "Filter value greater than empty set",
                "expression" : "$[?(42 > @.key)]",
                "result" : []
            }
        ]
    },
    {
        "given" : [{"some": "value"}],
        "cases" : [
            {
                "annotation" : "Filter empty set greater than empty set",
                "expression" : "$[?(@.other > @.key)]",
                "result" : []
            }
        ]
    },
    {
        "given" : [{"key1": 0,"key2": 20}, {"key1": 10,"key2": 9}],
        "cases" : [
            {
                "annotation" : "Filter non-empty set greater than non-empty set",
                "expression" : "$[?(@.key1 > @.key2)]",
                "result" : [{"key1": 10,"key2": 9}]
            }
        ]
    },
    // <= operator
    {
        "given" : [{"some": "value"}],
        "cases" : [
            {
                "annotation" : "Filter empty set less than or equal value",
                "expression" : "$[?(@.key<=42)]",
                "result" : []
            }
        ]
    },
    {
        "given" : [{"some": "value"}],
        "cases" : [
            {
                "annotation" : "Filter value less than or equal empty set",
                "expression" : "$[?(42 <= @.key)]",
                "result" : []
            }
        ]
    },
    {
        "given" : [{"some": "value"}],
        "cases" : [
            {
                "annotation" : "Filter empty set less than or equal empty set",
                "expression" : "$[?(@.other <= @.key)]",
                "result" : [{"some": "value"}]
            }
        ]
    },
    {
        "given" : [{"key1": 0,"key2": 20}, {"key1": 10,"key2": 9}],
        "cases" : [
            {
                "annotation" : "Filter non-empty set less than or equal non-empty set",
                "expression" : "$[?(@.key1 <= @.key2)]",
                "result" : [{"key1": 0,"key2": 20}]
            }
        ]
    },
    // >= operator
    {
        "given" : [{"some": "value"}],
        "cases" : [
            {
                "annotation" : "Filter empty set greater than or equal value",
                "expression" : "$[?(@.key>=42)]",
                "result" : []
            }
        ]
    },
    {
        "given" : [{"some": "value"}],
        "cases" : [
            {
                "annotation" : "Filter value greater than or equal empty set",
                "expression" : "$[?(42 >= @.key)]",
                "result" : []
            }
        ]
    },
    {
        "given" : [{"some": "value"}],
        "cases" : [
            {
                "annotation" : "Filter empty set greater than or equal empty set",
                "expression" : "$[?(@.other >= @.key)]",
                "result" : [{"some": "value"}]
            }
        ]
    },
    {
        "given" : [{"key1": 0,"key2": 20}, {"key1": 10,"key2": 9}],
        "cases" : [
            {
                "annotation" : "Filter non-empty set greater than or equal non-empty set",
                "expression" : "$[?(@.key1 >= @.key2)]",
                "result" : [{"key1": 10,"key2": 9}]
            }
        ]
    },

    // Tests from https://github.com/cburgmer/json-path-comparison
    {
        "given" : { "key": "value", "another key": {"complex": "string", "primitives": [0, 1]}},
        "cases" : [
            {
                "annotation" : "jsonpath recursive descent with *",
                "expression" : "$..*",
                "result" : ["value",{"complex" : "string","primitives" : [0,1]},"string",[0,1],0,1]
            }
        ]
    },
    {
        "given" : ["first", "second", "third", "forth", "fifth"],
        "cases" : [
            {
                "annotation" : "array index",
                "expression" : "$[2]",
                "result" : ["third"]
            }
        ]
    },
    {
        "given" : ["first", "second", "third"],
        "cases" : [
            {
                "annotation" : "Array index last",
                "expression" : "$[-1]",
                "result" : ["third"]
            }
        ]
    },
    {
        "given" : ["first", "second", "third", "forth", "fifth"],
        "cases" : [
            {
                "annotation" : "Array index slice start end step 0",
                "expression" : "$[0:3:0]",
                "error" : "Expected slice step at line 1 and column 8"
            }
        ]
    },
    {
        "given" : [{"key": 0}, {"key": 42}, {"key": -1}, {"key": 41}, {"key": 43}, {"key": 42.0001}, {"key": 41.9999}, {"key": 100}, {"some": "value"}],
        "cases" : [
            {
                "annotation" : "Filter less than",
                "expression" : "$[?(@.key<42)]",
                "result" : [{"key": 0}, {"key": -1}, {"key": 41}, {"key": 41.9999}]
            }
        ]
    },
    {
        "given" : [40,null,42],
        "cases" : [
            {
                "annotation" : "Wildcard bracket notation on null value array",
                "expression" : "$[*]",
                "result" : [40,null,42]
            }
        ]
    },
    {
        "given" : { "some": "string","int": 42,"object": {"key": "value"},"array": [0, 1]},
        "cases" : [
            {
                "annotation" : "Wildcard bracket notation on object",
                "expression" : "$[*]",
                "result" : ["string",42,{"key": "value"},[0,1]]
            }
        ]
    },
    {
        "given" : [{"bar": [{"baz": "hello"}]}],
        "cases" : [
            {
                "annotation" : "Wildcard bracket notation with key on nested objects",
                "expression" : "$[*].bar[*].baz",
                "result" : ["hello"]
            }
        ]
    },
    {
        "given" : ["string",42,{"key": "value"},[0, 1]],
        "cases" : [
            {
                "annotation" : "Wildcard dot notation on array",
                "expression" : "$.*",
                "result" : ["string",42,{"key": "value"},[0,1]]
            }
        ]
    },
    {
        "given" : { "some": "string","int": 42,"object": {"key": "value"},"array": [0, 1]},
        "cases" : [
            {
                "annotation" : "Wildcard dot notation on object",
                "expression" : "$.*",
                "result" : ["string",42,{"key": "value"},[0,1]]
            }
        ]
    }
]
